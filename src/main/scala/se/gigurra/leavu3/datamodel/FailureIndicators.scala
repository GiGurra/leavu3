package se.gigurra.leavu3.datamodel

import com.github.gigurra.heisenberg.MapData._
import com.github.gigurra.heisenberg.{Schema, Parsed}

case class FailureIndicators(source: SourceData = Map.empty) extends SafeParsed[FailureIndicators.type] {
  val canopyOpen            = parse(schema.canopyOpen)
  val cannonFailure         = parse(schema.cannonFailure)
  val rightTailPlaneFailure = parse(schema.rightTailPlaneFailure)
  val leftAileronFailure    = parse(schema.leftAileronFailure)
  val autopilotFailure      = parse(schema.autopilotFailure)
  val hydraulicsFailure     = parse(schema.hydraulicsFailure)
  val hudFailure            = parse(schema.hudFailure)
  val rightWingPumpFailure  = parse(schema.rightWingPumpFailure)
  val leftWingPumpFailure   = parse(schema.leftWingPumpFailure)
  val ecmFailure            = parse(schema.ecmFailure)
  val rightEngineFailure    = parse(schema.rightEngineFailure)
  val stallSignalization    = parse(schema.stallSignalization)
  val helmetFailure         = parse(schema.helmetFailure)
  val radarFailure          = parse(schema.radarFailure)
  val rightMainPumpFailure  = parse(schema.rightMainPumpFailure)
  val acsFailure            = parse(schema.acsFailure)
  val mfdFailure            = parse(schema.mfdFailure)
  val leftEngineFailure     = parse(schema.leftEngineFailure)
  val leftTailPlaneFailure  = parse(schema.leftTailPlaneFailure)
  val mlwsFailure           = parse(schema.mlwsFailure)
  val eosFailure            = parse(schema.eosFailure)
  val autopilotOn           = parse(schema.autopilotOn)
  val leftMainPumpFailure   = parse(schema.leftMainPumpFailure)
  val rightAileronFailure   = parse(schema.rightAileronFailure)
  val rwsFailure            = parse(schema.rwsFailure)
  val masterCaution         = parse(schema.masterCaution)
  val fuelTankDamage        = parse(schema.fuelTankDamage)
  val hearFailure           = parse(schema.hearFailure)
}

object FailureIndicators extends Schema[FailureIndicators] {
  val canopyOpen            = required[Boolean]("CanopyOpen", default = false)
  val cannonFailure         = required[Boolean]("CannonFailure", default = false)
  val rightTailPlaneFailure = required[Boolean]("RightTailPlaneFailure", default = false)
  val leftAileronFailure    = required[Boolean]("LeftAileronFailure", default = false)
  val autopilotFailure      = required[Boolean]("AutopilotFailure", default = false)
  val hydraulicsFailure     = required[Boolean]("HydraulicsFailure", default = false)
  val hudFailure            = required[Boolean]("HUDFailure", default = false)
  val rightWingPumpFailure  = required[Boolean]("RightWingPumpFailure", default = false)
  val leftWingPumpFailure   = required[Boolean]("LeftWingPumpFailure", default = false)
  val ecmFailure            = required[Boolean]("ECMFailure", default = false)
  val rightEngineFailure    = required[Boolean]("RightEngineFailure", default = false)
  val stallSignalization    = required[Boolean]("StallSignalization", default = false)
  val helmetFailure         = required[Boolean]("HelmetFailure", default = false)
  val radarFailure          = required[Boolean]("RadarFailure", default = false)
  val rightMainPumpFailure  = required[Boolean]("RightMainPumpFailure", default = false)
  val acsFailure            = required[Boolean]("ACSFailure", default = false)
  val mfdFailure            = required[Boolean]("MFDFailure", default = false)
  val leftEngineFailure     = required[Boolean]("LeftEngineFailure", default = false)
  val leftTailPlaneFailure  = required[Boolean]("LeftTailPlaneFailure", default = false)
  val mlwsFailure           = required[Boolean]("MLWSFailure", default = false)
  val eosFailure            = required[Boolean]("EOSFailure", default = false)
  val autopilotOn           = required[Boolean]("AutopilotOn", default = false)
  val leftMainPumpFailure   = required[Boolean]("LeftMainPumpFailure", default = false)
  val rightAileronFailure   = required[Boolean]("RightAileronFailure", default = false)
  val rwsFailure            = required[Boolean]("RWSFailure", default = false)
  val masterCaution         = required[Boolean]("MasterWarning", default = false)
  val fuelTankDamage        = required[Boolean]("FuelTankDamage", default = false)
  val hearFailure           = required[Boolean]("GearFailure", default = false)
}

